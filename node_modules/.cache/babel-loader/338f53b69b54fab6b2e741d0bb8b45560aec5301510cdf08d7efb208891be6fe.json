{"ast":null,"code":"const {\n  Client\n} = require(\"@notionhq/client\");\nconst notion = new Client({\n  auth: \"secret_EoxNTywQpCYhhUS80hURa31q4JNRfQvNWYYw0oPVxLX\"\n});\nasync function addData(databaseId, data) {\n  try {\n    const newPage = await notion.pages.create({\n      parent: {\n        database_id: databaseId\n      },\n      properties: {\n        \"Name\": {\n          title: [{\n            text: {\n              content: data.name\n            }\n          }]\n        },\n        \"Number\": {\n          number: data.number\n        },\n        \"Title\": {\n          rich_text: [{\n            text: {\n              content: data.title\n            }\n          }]\n        },\n        \"ID\": {\n          rich_text: [{\n            text: {\n              content: data.id\n            }\n          }]\n        },\n        ...(data.vol && {\n          \"Vol\": {\n            select: {\n              name: data.vol\n            }\n          }\n        }),\n        ...(data.score && {\n          \"Score\": {\n            select: {\n              name: data.score\n            }\n          }\n        }),\n        ...(data.date && {\n          \"Date\": {\n            date: {\n              start: data.date\n            }\n          }\n        }),\n        ...(data.writer && {\n          \"Writer\": {\n            rich_text: [{\n              text: {\n                content: data.writer\n              }\n            }]\n          }\n        }),\n        ...(data.penciler && {\n          \"Penciler\": {\n            rich_text: [{\n              text: {\n                content: data.penciler\n              }\n            }]\n          }\n        }),\n        ...(data.labels && {\n          \"Label\": {\n            multi_select: data.labels.map(label => ({\n              name: label\n            }))\n          }\n        }),\n        \"Order\": {\n          number: data.order\n        }\n      }\n    });\n    console.log(`Nueva página creada en la base de datos ${databaseId}:`, newPage);\n  } catch (error) {\n    console.error(\"Error al agregar datos a la base de datos:\", error);\n  }\n}\nasync function main() {\n  const wikiData = {\n    databaseId: \"994834b0b3f54c7790f50d544c95e9e2\",\n    name: \"X-Men\",\n    number: 3,\n    title: \"Second Genesis2\",\n    score: \"☆\",\n    id: \"P003-0002\",\n    labels: [\"Spiderman\", \"Avengers\"],\n    order: 2\n  };\n  const localData = {\n    databaseId: \"ccf12b1f5b8443939d2c85ae058ea164\",\n    name: \"AMS\",\n    vol: \"VOL 1\",\n    number: 19,\n    title: \"Part 11\",\n    date: \"1999-01-01\",\n    writer: \"A\",\n    penciler: \"B\",\n    id: \"AMS01-00010\",\n    order: 19\n  };\n\n  //await addData(wikiData.databaseId, wikiData);\n  await addData(localData.databaseId, localData);\n}\nmain();","map":{"version":3,"names":["Client","require","notion","auth","addData","databaseId","data","newPage","pages","create","parent","database_id","properties","title","text","content","name","number","rich_text","id","vol","select","score","date","start","writer","penciler","labels","multi_select","map","label","order","console","log","error","main","wikiData","localData"],"sources":["C:/Users/Dell.DESKTOP-QRSQ2RO/Desktop/REBIRTH/src/js/writeDB.js"],"sourcesContent":["const { Client } = require(\"@notionhq/client\");\r\n\r\nconst notion = new Client({\r\n    auth: \"secret_EoxNTywQpCYhhUS80hURa31q4JNRfQvNWYYw0oPVxLX\",\r\n});\r\n\r\nasync function addData(databaseId, data) {\r\n    try {\r\n        const newPage = await notion.pages.create({\r\n            parent: { database_id: databaseId },\r\n            properties: {\r\n                \"Name\": { title: [{ text: { content: data.name } }] },\r\n                \"Number\": { number: data.number },\r\n                \"Title\": { rich_text: [{ text: { content: data.title } }] },\r\n                \"ID\": { rich_text: [{ text: { content: data.id } }] },\r\n                ...(data.vol && { \"Vol\": { select: { name: data.vol } } }),\r\n                ...(data.score && { \"Score\": { select: { name: data.score } } }),\r\n                ...(data.date && { \"Date\": { date: { start: data.date } } }),\r\n                ...(data.writer && { \"Writer\": { rich_text: [{ text: { content: data.writer } }] } }),\r\n                ...(data.penciler && { \"Penciler\": { rich_text: [{ text: { content: data.penciler } }] } }),\r\n                ...(data.labels && { \"Label\": { multi_select: data.labels.map(label => ({ name: label })) } }),\r\n                \"Order\": { number: data.order }\r\n            },\r\n        });\r\n\r\n        console.log(`Nueva página creada en la base de datos ${databaseId}:`, newPage);\r\n    } catch (error) {\r\n        console.error(\"Error al agregar datos a la base de datos:\", error);\r\n    }\r\n}\r\n\r\nasync function main() {\r\n    const wikiData = {\r\n        databaseId: \"994834b0b3f54c7790f50d544c95e9e2\",\r\n        name: \"X-Men\",\r\n        number: 3,\r\n        title: \"Second Genesis2\",\r\n        score: \"☆\",\r\n        id: \"P003-0002\",\r\n        labels: [\"Spiderman\", \"Avengers\"],\r\n        order: 2\r\n    };\r\n\r\n    const localData = {\r\n        databaseId: \"ccf12b1f5b8443939d2c85ae058ea164\",\r\n        name: \"AMS\",\r\n        vol: \"VOL 1\",\r\n        number: 19,\r\n        title: \"Part 11\",\r\n        date: \"1999-01-01\",\r\n        writer: \"A\",\r\n        penciler: \"B\",\r\n        id: \"AMS01-00010\",\r\n        order: 19\r\n    };\r\n\r\n    //await addData(wikiData.databaseId, wikiData);\r\n    await addData(localData.databaseId, localData);\r\n}\r\n\r\nmain();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}