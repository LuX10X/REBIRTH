{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isMentionRichTextItemResponse = exports.isEquationRichTextItemResponse = exports.isTextRichTextItemResponse = exports.isFullComment = exports.isFullUser = exports.isFullPageOrDatabase = exports.isFullDatabase = exports.isFullPage = exports.isFullBlock = exports.collectPaginatedAPI = exports.iteratePaginatedAPI = void 0;\n/**\n * Returns an async iterator over the results of any paginated Notion API.\n *\n * Example (given a notion Client called `notion`):\n *\n * ```\n * for await (const block of iteratePaginatedAPI(notion.blocks.children.list, {\n *   block_id: parentBlockId,\n * })) {\n *   // Do something with block.\n * }\n * ```\n *\n * @param listFn A bound function on the Notion client that represents a conforming paginated\n *   API. Example: `notion.blocks.children.list`.\n * @param firstPageArgs Arguments that should be passed to the API on the first and subsequent\n *   calls to the API. Any necessary `next_cursor` will be automatically populated by\n *   this function. Example: `{ block_id: \"<my block id>\" }`\n */\nasync function* iteratePaginatedAPI(listFn, firstPageArgs) {\n  let nextCursor = firstPageArgs.start_cursor;\n  do {\n    const response = await listFn({\n      ...firstPageArgs,\n      start_cursor: nextCursor\n    });\n    yield* response.results;\n    nextCursor = response.next_cursor;\n  } while (nextCursor);\n}\nexports.iteratePaginatedAPI = iteratePaginatedAPI;\n/**\n * Collect all of the results of paginating an API into an in-memory array.\n *\n * Example (given a notion Client called `notion`):\n *\n * ```\n * const blocks = await collectPaginatedAPI(notion.blocks.children.list, {\n *   block_id: parentBlockId,\n * })\n * // Do something with blocks.\n * ```\n *\n * @param listFn A bound function on the Notion client that represents a conforming paginated\n *   API. Example: `notion.blocks.children.list`.\n * @param firstPageArgs Arguments that should be passed to the API on the first and subsequent\n *   calls to the API. Any necessary `next_cursor` will be automatically populated by\n *   this function. Example: `{ block_id: \"<my block id>\" }`\n */\nasync function collectPaginatedAPI(listFn, firstPageArgs) {\n  const results = [];\n  for await (const item of iteratePaginatedAPI(listFn, firstPageArgs)) {\n    results.push(item);\n  }\n  return results;\n}\nexports.collectPaginatedAPI = collectPaginatedAPI;\n/**\n * @returns `true` if `response` is a full `BlockObjectResponse`.\n */\nfunction isFullBlock(response) {\n  return response.object === \"block\" && \"type\" in response;\n}\nexports.isFullBlock = isFullBlock;\n/**\n * @returns `true` if `response` is a full `PageObjectResponse`.\n */\nfunction isFullPage(response) {\n  return response.object === \"page\" && \"url\" in response;\n}\nexports.isFullPage = isFullPage;\n/**\n * @returns `true` if `response` is a full `DatabaseObjectResponse`.\n */\nfunction isFullDatabase(response) {\n  return response.object === \"database\" && \"title\" in response;\n}\nexports.isFullDatabase = isFullDatabase;\n/**\n * @returns `true` if `response` is a full `DatabaseObjectResponse` or a full\n * `PageObjectResponse`.\n */\nfunction isFullPageOrDatabase(response) {\n  if (response.object === \"database\") {\n    return isFullDatabase(response);\n  } else {\n    return isFullPage(response);\n  }\n}\nexports.isFullPageOrDatabase = isFullPageOrDatabase;\n/**\n * @returns `true` if `response` is a full `UserObjectResponse`.\n */\nfunction isFullUser(response) {\n  return \"type\" in response;\n}\nexports.isFullUser = isFullUser;\n/**\n * @returns `true` if `response` is a full `CommentObjectResponse`.\n */\nfunction isFullComment(response) {\n  return \"created_by\" in response;\n}\nexports.isFullComment = isFullComment;\n/**\n * @returns `true` if `richText` is a `TextRichTextItemResponse`.\n */\nfunction isTextRichTextItemResponse(richText) {\n  return richText.type === \"text\";\n}\nexports.isTextRichTextItemResponse = isTextRichTextItemResponse;\n/**\n * @returns `true` if `richText` is an `EquationRichTextItemResponse`.\n */\nfunction isEquationRichTextItemResponse(richText) {\n  return richText.type === \"equation\";\n}\nexports.isEquationRichTextItemResponse = isEquationRichTextItemResponse;\n/**\n * @returns `true` if `richText` is an `MentionRichTextItemResponse`.\n */\nfunction isMentionRichTextItemResponse(richText) {\n  return richText.type === \"mention\";\n}\nexports.isMentionRichTextItemResponse = isMentionRichTextItemResponse;","map":{"version":3,"names":["iteratePaginatedAPI","listFn","firstPageArgs","nextCursor","start_cursor","response","results","next_cursor","exports","collectPaginatedAPI","item","push","isFullBlock","object","isFullPage","isFullDatabase","isFullPageOrDatabase","isFullUser","isFullComment","isTextRichTextItemResponse","richText","type","isEquationRichTextItemResponse","isMentionRichTextItemResponse"],"sources":["C:\\Users\\Dell.DESKTOP-QRSQ2RO\\Desktop\\REBIRTH\\node_modules\\@notionhq\\client\\src\\helpers.ts"],"sourcesContent":["import {\n  BlockObjectResponse,\n  CommentObjectResponse,\n  DatabaseObjectResponse,\n  EquationRichTextItemResponse,\n  PageObjectResponse,\n  PartialBlockObjectResponse,\n  PartialCommentObjectResponse,\n  PartialDatabaseObjectResponse,\n  PartialPageObjectResponse,\n  PartialUserObjectResponse,\n  RichTextItemResponse,\n  TextRichTextItemResponse,\n  UserObjectResponse,\n} from \"./api-endpoints\"\n\ninterface PaginatedArgs {\n  start_cursor?: string\n}\n\ninterface PaginatedList<T> {\n  object: \"list\"\n  results: T[]\n  next_cursor: string | null\n  has_more: boolean\n}\n\n/**\n * Returns an async iterator over the results of any paginated Notion API.\n *\n * Example (given a notion Client called `notion`):\n *\n * ```\n * for await (const block of iteratePaginatedAPI(notion.blocks.children.list, {\n *   block_id: parentBlockId,\n * })) {\n *   // Do something with block.\n * }\n * ```\n *\n * @param listFn A bound function on the Notion client that represents a conforming paginated\n *   API. Example: `notion.blocks.children.list`.\n * @param firstPageArgs Arguments that should be passed to the API on the first and subsequent\n *   calls to the API. Any necessary `next_cursor` will be automatically populated by\n *   this function. Example: `{ block_id: \"<my block id>\" }`\n */\nexport async function* iteratePaginatedAPI<Args extends PaginatedArgs, Item>(\n  listFn: (args: Args) => Promise<PaginatedList<Item>>,\n  firstPageArgs: Args\n): AsyncIterableIterator<Item> {\n  let nextCursor: string | null | undefined = firstPageArgs.start_cursor\n  do {\n    const response: PaginatedList<Item> = await listFn({\n      ...firstPageArgs,\n      start_cursor: nextCursor,\n    })\n    yield* response.results\n    nextCursor = response.next_cursor\n  } while (nextCursor)\n}\n\n/**\n * Collect all of the results of paginating an API into an in-memory array.\n *\n * Example (given a notion Client called `notion`):\n *\n * ```\n * const blocks = await collectPaginatedAPI(notion.blocks.children.list, {\n *   block_id: parentBlockId,\n * })\n * // Do something with blocks.\n * ```\n *\n * @param listFn A bound function on the Notion client that represents a conforming paginated\n *   API. Example: `notion.blocks.children.list`.\n * @param firstPageArgs Arguments that should be passed to the API on the first and subsequent\n *   calls to the API. Any necessary `next_cursor` will be automatically populated by\n *   this function. Example: `{ block_id: \"<my block id>\" }`\n */\nexport async function collectPaginatedAPI<Args extends PaginatedArgs, Item>(\n  listFn: (args: Args) => Promise<PaginatedList<Item>>,\n  firstPageArgs: Args\n): Promise<Item[]> {\n  const results: Item[] = []\n  for await (const item of iteratePaginatedAPI(listFn, firstPageArgs)) {\n    results.push(item)\n  }\n  return results\n}\n\n/**\n * @returns `true` if `response` is a full `BlockObjectResponse`.\n */\nexport function isFullBlock(\n  response:\n    | PageObjectResponse\n    | PartialPageObjectResponse\n    | DatabaseObjectResponse\n    | PartialDatabaseObjectResponse\n    | BlockObjectResponse\n    | PartialBlockObjectResponse\n): response is BlockObjectResponse {\n  return response.object === \"block\" && \"type\" in response\n}\n\n/**\n * @returns `true` if `response` is a full `PageObjectResponse`.\n */\nexport function isFullPage(\n  response:\n    | PageObjectResponse\n    | PartialPageObjectResponse\n    | DatabaseObjectResponse\n    | PartialDatabaseObjectResponse\n    | BlockObjectResponse\n    | PartialBlockObjectResponse\n): response is PageObjectResponse {\n  return response.object === \"page\" && \"url\" in response\n}\n\n/**\n * @returns `true` if `response` is a full `DatabaseObjectResponse`.\n */\nexport function isFullDatabase(\n  response:\n    | PageObjectResponse\n    | PartialPageObjectResponse\n    | DatabaseObjectResponse\n    | PartialDatabaseObjectResponse\n    | BlockObjectResponse\n    | PartialBlockObjectResponse\n): response is DatabaseObjectResponse {\n  return response.object === \"database\" && \"title\" in response\n}\n\n/**\n * @returns `true` if `response` is a full `DatabaseObjectResponse` or a full\n * `PageObjectResponse`.\n */\nexport function isFullPageOrDatabase(\n  response:\n    | PageObjectResponse\n    | PartialPageObjectResponse\n    | DatabaseObjectResponse\n    | PartialDatabaseObjectResponse\n    | BlockObjectResponse\n    | PartialBlockObjectResponse\n): response is DatabaseObjectResponse | PageObjectResponse {\n  if (response.object === \"database\") {\n    return isFullDatabase(response)\n  } else {\n    return isFullPage(response)\n  }\n}\n\n/**\n * @returns `true` if `response` is a full `UserObjectResponse`.\n */\nexport function isFullUser(\n  response: UserObjectResponse | PartialUserObjectResponse\n): response is UserObjectResponse {\n  return \"type\" in response\n}\n\n/**\n * @returns `true` if `response` is a full `CommentObjectResponse`.\n */\nexport function isFullComment(\n  response: CommentObjectResponse | PartialCommentObjectResponse\n): response is CommentObjectResponse {\n  return \"created_by\" in response\n}\n\n/**\n * @returns `true` if `richText` is a `TextRichTextItemResponse`.\n */\nexport function isTextRichTextItemResponse(\n  richText: RichTextItemResponse\n): richText is TextRichTextItemResponse {\n  return richText.type === \"text\"\n}\n\n/**\n * @returns `true` if `richText` is an `EquationRichTextItemResponse`.\n */\nexport function isEquationRichTextItemResponse(\n  richText: RichTextItemResponse\n): richText is EquationRichTextItemResponse {\n  return richText.type === \"equation\"\n}\n\n/**\n * @returns `true` if `richText` is an `MentionRichTextItemResponse`.\n */\nexport function isMentionRichTextItemResponse(\n  richText: RichTextItemResponse\n): richText is EquationRichTextItemResponse {\n  return richText.type === \"mention\"\n}\n"],"mappings":";;;;;;AA2BA;;;;;;;;;;;;;;;;;;;AAmBO,gBAAgBA,mBAAmBA,CACxCC,MAAoD,EACpDC,aAAmB;EAEnB,IAAIC,UAAU,GAA8BD,aAAa,CAACE,YAAY;EACtE,GAAG;IACD,MAAMC,QAAQ,GAAwB,MAAMJ,MAAM,CAAC;MACjD,GAAGC,aAAa;MAChBE,YAAY,EAAED;KACf,CAAC;IACF,OAAOE,QAAQ,CAACC,OAAO;IACvBH,UAAU,GAAGE,QAAQ,CAACE,WAAW;GAClC,QAAQJ,UAAU;AACrB;AAbAK,OAAA,CAAAR,mBAAA,GAAAA,mBAAA;AAeA;;;;;;;;;;;;;;;;;;AAkBO,eAAeS,mBAAmBA,CACvCR,MAAoD,EACpDC,aAAmB;EAEnB,MAAMI,OAAO,GAAW,EAAE;EAC1B,WAAW,MAAMI,IAAI,IAAIV,mBAAmB,CAACC,MAAM,EAAEC,aAAa,CAAC,EAAE;IACnEI,OAAO,CAACK,IAAI,CAACD,IAAI,CAAC;;EAEpB,OAAOJ,OAAO;AAChB;AATAE,OAAA,CAAAC,mBAAA,GAAAA,mBAAA;AAWA;;;AAGA,SAAgBG,WAAWA,CACzBP,QAM8B;EAE9B,OAAOA,QAAQ,CAACQ,MAAM,KAAK,OAAO,IAAI,MAAM,IAAIR,QAAQ;AAC1D;AAVAG,OAAA,CAAAI,WAAA,GAAAA,WAAA;AAYA;;;AAGA,SAAgBE,UAAUA,CACxBT,QAM8B;EAE9B,OAAOA,QAAQ,CAACQ,MAAM,KAAK,MAAM,IAAI,KAAK,IAAIR,QAAQ;AACxD;AAVAG,OAAA,CAAAM,UAAA,GAAAA,UAAA;AAYA;;;AAGA,SAAgBC,cAAcA,CAC5BV,QAM8B;EAE9B,OAAOA,QAAQ,CAACQ,MAAM,KAAK,UAAU,IAAI,OAAO,IAAIR,QAAQ;AAC9D;AAVAG,OAAA,CAAAO,cAAA,GAAAA,cAAA;AAYA;;;;AAIA,SAAgBC,oBAAoBA,CAClCX,QAM8B;EAE9B,IAAIA,QAAQ,CAACQ,MAAM,KAAK,UAAU,EAAE;IAClC,OAAOE,cAAc,CAACV,QAAQ,CAAC;GAChC,MAAM;IACL,OAAOS,UAAU,CAACT,QAAQ,CAAC;;AAE/B;AAdAG,OAAA,CAAAQ,oBAAA,GAAAA,oBAAA;AAgBA;;;AAGA,SAAgBC,UAAUA,CACxBZ,QAAwD;EAExD,OAAO,MAAM,IAAIA,QAAQ;AAC3B;AAJAG,OAAA,CAAAS,UAAA,GAAAA,UAAA;AAMA;;;AAGA,SAAgBC,aAAaA,CAC3Bb,QAA8D;EAE9D,OAAO,YAAY,IAAIA,QAAQ;AACjC;AAJAG,OAAA,CAAAU,aAAA,GAAAA,aAAA;AAMA;;;AAGA,SAAgBC,0BAA0BA,CACxCC,QAA8B;EAE9B,OAAOA,QAAQ,CAACC,IAAI,KAAK,MAAM;AACjC;AAJAb,OAAA,CAAAW,0BAAA,GAAAA,0BAAA;AAMA;;;AAGA,SAAgBG,8BAA8BA,CAC5CF,QAA8B;EAE9B,OAAOA,QAAQ,CAACC,IAAI,KAAK,UAAU;AACrC;AAJAb,OAAA,CAAAc,8BAAA,GAAAA,8BAAA;AAMA;;;AAGA,SAAgBC,6BAA6BA,CAC3CH,QAA8B;EAE9B,OAAOA,QAAQ,CAACC,IAAI,KAAK,SAAS;AACpC;AAJAb,OAAA,CAAAe,6BAAA,GAAAA,6BAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}